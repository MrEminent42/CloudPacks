package me.MrEminent42.cp.objects;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import me.MrEminent42.cp.CloudPacksPlugin;
import me.MrEminent42.cp.Config.CloudPackConfig;
import me.MrEminent42.cp.Config.ConfigWrapper;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

public class CloudPack {
	
	private static CloudPacksPlugin plugin = CloudPacksPlugin.getPlugin(CloudPacksPlugin.class);
	
	private static ArrayList<CloudPack> open = new ArrayList<CloudPack>();
	private static ArrayList<CloudPack> activated = new ArrayList<CloudPack>();
	
	private String name;
	private UUID id;
	private UUID owner;
	private int rows;
	private Inventory inv;
	private ArrayList<ItemStack> contents = new ArrayList<ItemStack>();
	private CloudPackConfig packConfig;
	
	public CloudPack(UUID owner, String name, UUID id, List<ItemStack> contents, int rows) {
		this.name = name;
		this.owner = owner;
		this.rows = rows;
		this.id = id;
		this.packConfig = new CloudPackConfig(this);
		this.packConfig.createFile("Loading " + Bukkit.getPlayer(id).getName() + "'s CloudPack named " + name, "WARNING: "
				+ "Do not edit this file while server is running. All changes will be overridden when stopping/reloading the server."
				+ " \n \nAlways stop the server IF you need to edit this file.");
		this.packConfig.getConfig().set("name", name);
		this.packConfig.getConfig().set("contents", contents);
		this.packConfig.getConfig().set("rows", rows);
		
		this.inv = Bukkit.getServer().createInventory(null, rows, name);
	}
	
	public CloudPack(CloudPackConfig config) {
		this.name = config.getName();
		this.id = config.getID();
		this.owner = config.getOwner();
		this.rows = config.getRows();
		this.contents = config.getContents();
		this.packConfig = config;
		this.inv = Bukkit.getServer().createInventory(null, rows, name);
	}
	
	public void showBackpack(Player p) { 
		p.openInventory(inv);
	}
	
	public void giveKey(Player p) {
		CloudPackKey key = new CloudPackKey(this);
		key.give(p);
	}
	
	public boolean isActive(CloudPack p) {
		if (activated.contains(p)) return true;
		return false;
	}
	
	// Contents \\
	public HashMap<Integer, ItemStack> addItem(ItemStack item) {
		return inv.addItem(item);
	}
	
	public void removeItem(ItemStack item) {
		inv.remove(item);
	}
	
	public void setContents(ArrayList<ItemStack> contents) { 
		this.contents = contents;
	}
	
	public ArrayList<ItemStack> getContents() {
		return this.contents;
	}
	
	// Owner \\
	public UUID getOwner() {
		return this.owner;
	}
	
	// Name \\
	public String getName() {
		return this.name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	// Rows \\
	public int getRows() {
		return this.rows;
	}
	
	// ID \\
	public UUID getID() {
		return this.id;
	}
	
	// INV \\
	public Inventory getInv() {
		return this.inv;
	}
	
	// Load \\
	public CloudPack activate() {
		activated.add(this);
		return this;
	}
	
	// STATIC METHODS \\
	
	// Pack Management \\
	
	public static ArrayList<CloudPack> getActivatedPacks(UUID owner) {
		ArrayList<CloudPack> packs = new ArrayList<CloudPack>();
		for (CloudPack pack : activated) {
			if (pack.getOwner().equals(owner)) packs.add(pack);
		}
		return packs;
	}
	
	public static ArrayList<CloudPack> getAllPacks(UUID owner) {
		ArrayList<CloudPack> packs = new ArrayList<CloudPack>();
		
		File folder = new File("plugins/CloudPacks/storage/");
		for (File file : folder.listFiles()) {
			if (file.isDirectory()) continue;
			CloudPackConfig cfg = new CloudPackConfig(file);
			List<ItemStack> items = new ArrayList<ItemStack>();
			int rows = cfg.getConfig().getConfigurationSection("contents").getKeys(false).size();
			for (int i = 0; i < rows; i++) items.add(cfg.getConfig().getItemStack("contents." + i));
			packs.add(new CloudPack(UUID.fromString(file.getName()), cfg.getConfig().getString("name"), 
					UUID.fromString(file.getName()), items, rows));
		}
		return packs;
	}
	
	public static CloudPack getActivatedPack(UUID id) {
		for (CloudPack pack : activated) {
			if (pack.getID().equals(id)) return pack;
		}
		return null;
	}
	
	public static CloudPack loadPack(UUID id) {
		File file = new File("plugins/CloudPacks/storage/" + id + ".pack");
		CloudPackConfig cfg = new CloudPackConfig(file);
		List<ItemStack> items = new ArrayList<ItemStack>();
		for (int i = 0; i < cfg.getConfig().getInt("rows"); i++) items.add(cfg.getConfig().getItemStack("contents." + i));
		
		return new CloudPack(UUID.fromString(cfg.getConfig().getString("owner")), cfg.getConfig().getString("name"), 
				UUID.fromString(file.getName().replaceAll(".pack", "")), items, cfg.getConfig().getInt("rows")).activate();
	}
	
	public static boolean isLoaded(CloudPack pack) {
		if (activated.contains(pack)) return true;
		return false;
	}
	
	public static void loadPlayersPacks(UUID owner) {
		File folder = new File("plugins/CloudPacks/storage");
		for (File file : folder.listFiles()) {
			if (file.isDirectory() || (!file.getName().endsWith(".pack"))) continue;
			
			CloudPackConfig cfg = new CloudPackConfig(file);
			if (UUID.fromString(cfg.getConfig().getString("owner")).equals(owner)) {
				List<ItemStack> items = new ArrayList<ItemStack>();
				for (int i = 0; i < cfg.getConfig().getInt("rows"); i++) items.add(cfg.getConfig().getItemStack("contents." + i));
				
				new CloudPack(UUID.fromString(cfg.getConfig().getString("owner")), cfg.getConfig().getString("name"), 
						UUID.fromString(file.getName().replaceAll(".pack", "")), items, cfg.getConfig().getInt("rows")).activate();
			}
		}
	}
	
	public static ArrayList<CloudPackConfig> getAllPackFiles() {
		ArrayList<CloudPackConfig> configs = new ArrayList<CloudPackConfig>();
		
		File folder = new File("plugins/CloudPacks/storage");
		for (File f : folder.listFiles()) {
			if (!f.isDirectory()) {
				String[] name = f.getName().split(File.separator);
				if (CloudPackConfig.isCloudPackConfig(new ConfigWrapper(plugin, "storage", name[name.length - 1]))) {
					configs.add(new CloudPackConfig(f));
				}
			}
		}
		
		return configs;
	}
}
